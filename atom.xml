<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>meanme</title>
  
  <subtitle>Coding experiments and tutorials</subtitle>
  <link href="http://meanme.com/atom.xml" rel="self"/>
  
  <link href="http://meanme.com/"/>
  <updated>2023-05-03T16:15:47.606Z</updated>
  <id>http://meanme.com/</id>
  
  <author>
    <name>Matteo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dropeffect</title>
    <link href="http://meanme.com/2023/04/30/dropeffect/"/>
    <id>http://meanme.com/2023/04/30/dropeffect/</id>
    <published>2023-05-01T04:35:51.000Z</published>
    <updated>2023-05-03T16:15:47.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DropEffect"><a href="#DropEffect" class="headerlink" title="DropEffect"></a>DropEffect</h1><p>Clear shapes, score high! DropEffect - minimalist puzzle game in space.</p><p>Dive into DropEffect, in space where your objective is to match spheres to clear them and achieve the highest score.</p><p>With glowing numeral planets and a soothing soundtrack, DropEffect provides a hypnotic experience. Use your strategic skills to clear as many spheres as you can.</p><p>Are you up for it? How would you fare in the leaderboards?<br>Warp speed!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DropEffect&quot;&gt;&lt;a href=&quot;#DropEffect&quot; class=&quot;headerlink&quot; title=&quot;DropEffect&quot;&gt;&lt;/a&gt;DropEffect&lt;/h1&gt;&lt;p&gt;Clear shapes, score high! DropEffect -</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hanzi Dungeon</title>
    <link href="http://meanme.com/2020/02/23/hanzi-dungeon/"/>
    <id>http://meanme.com/2020/02/23/hanzi-dungeon/</id>
    <published>2020-02-24T01:36:37.000Z</published>
    <updated>2023-04-30T22:00:51.245Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/02/23/hanzi-dungeon/hero.png" title="Hanzi Dungeon"><p>There are several studies on the benefits of language learning on the brain, from fighting aging, to boosting cognitive functions. The fact is, it remains really hard, especially with a full time job, and limited opportunities to travel.</p><p>To motivate myself to study I decided to sign up for the <a href="http://www.chinesetest.cn/ChangeLan.do?languge=en" target="_blank" rel="noopener">HSK exam</a> about a year ago, and that’s how I started reviewing decks of flashcards. Answering to flashcard prompts correctly brought me great satisfaction, but I started asking myself… is there a way to make the process more fun?</p><a id="more"></a><h1 id="Gamified-language-learning"><a href="#Gamified-language-learning" class="headerlink" title="Gamified language learning"></a>Gamified language learning</h1><p>I started researching gamified apps, like <a href="https://www.duolingo.com/" target="_blank" rel="noopener">Duolingo</a>, but in terms of retention, flashcard decks on <a href="https://www.pleco.com/" target="_blank" rel="noopener">Pleco</a> seemed to produce the best. In his book <a href="https://www.goodreads.com/book/show/19661852-fluent-forever" target="_blank" rel="noopener">Fluent Forever</a> Gabriel Wyner covers the history and theory of spaced repetition, and why I found it so effective.<br>That’s when I started thinking about creating a game to learning Chinese based on spaced repetition</p><img src="/2020/02/23/hanzi-dungeon/combat.png" title="Flashcard based combat"><h1 id="Game-requirements-and-Spaced-Repetition"><a href="#Game-requirements-and-Spaced-Repetition" class="headerlink" title="Game requirements and Spaced Repetition"></a>Game requirements and Spaced Repetition</h1><p>When I started writing down the requirements and ideas for a possible game, I stumbled upon the <a href="https://supermemo.guru/wiki/SuperMemo_1.0_for_DOS_(1987" target="_blank" rel="noopener">Super Memo 2</a>#Algorithm_SM-2) algorithm to maximize the effectiveness of flashcard reviews. I modified the original algorithm to allow for continuous play, instead of only presenting the same flashcards after a given number of days, to avoid running out of cards.</p><h1 id="Pixel-art-and-roguelikes"><a href="#Pixel-art-and-roguelikes" class="headerlink" title="Pixel art and roguelikes"></a>Pixel art and roguelikes</h1><p>While Hanzi Dungeon is far from a complete study solution, I hope it still proves a fun way to review the HSK flashcards, and practice Chinese vocabulary.</p><p>I tried to combine my love for pixel art (thanks to the wonderful assets created by <a href="https://pita.itch.io/" target="_blank" rel="noopener">Pita</a>), and roguelike games, going for the SNES esthetics.</p><img src="/2020/02/23/hanzi-dungeon/intro.png" title="Hanzi Dungeon"><p>If you’re studying a new language I wish you the best of luck and success in your endeavors. If you happen to be practicing for your HSK exam, feel free to check out <a href="https://apps.apple.com/us/app/hanzi-dungeon/id1461685505" target="_blank" rel="noopener">Hanzi Dungeon for iOS</a></p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;/2020/02/23/hanzi-dungeon/hero.png&quot; title=&quot;Hanzi Dungeon&quot;&gt;
&lt;p&gt;There are several studies on the benefits of language learning on the brain, from fighting aging, to boosting cognitive functions. The fact is, it remains really hard, especially with a full time job, and limited opportunities to travel.&lt;/p&gt;
&lt;p&gt;To motivate myself to study I decided to sign up for the &lt;a href=&quot;http://www.chinesetest.cn/ChangeLan.do?languge=en&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HSK exam&lt;/a&gt; about a year ago, and that’s how I started reviewing decks of flashcards. Answering to flashcard prompts correctly brought me great satisfaction, but I started asking myself… is there a way to make the process more fun?&lt;/p&gt;</summary>
    
    
    
    
    <category term="Unity" scheme="http://meanme.com/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Responsive Illuminated Manuscript</title>
    <link href="http://meanme.com/2019/04/04/responsive-illuminated-manuscript/"/>
    <id>http://meanme.com/2019/04/04/responsive-illuminated-manuscript/</id>
    <published>2019-04-05T02:42:40.000Z</published>
    <updated>2023-04-30T22:00:51.309Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Back in the Middle Ages, must have been a spectacle to lay eye on an <a href="https://www.khanacademy.org/partner-content/getty-museum/getty-manuscripts/a/what-is-an-illuminated-manuscript" target="_blank" rel="noopener">Illuminated Manuscript</a>.</p><img src="/2019/04/04/responsive-illuminated-manuscript/illuminated-manuscript-header.jpg" title="Illuminated Manuscript Detail"><p>The fine illustrations, the rich decorative elements, and the beautiful capital letters, bring typography and art together.</p><p>After visiting the <a href="http://www.getty.edu/art/manuscripts/" target="_blank" rel="noopener">Getty’s Manuscripts</a> I started asking myself - what would a script look like on a web page?<br>Given the incredible amount of minute details, how much could it be appreciated on different form factors?<br><a id="more"></a></p><p>It was fun to come up with a simple “responsive” example that changes the Level Of Detail (LoD) of the initial letter based on the width of the page, powered by the power of Lottie.<br>Depending on the available width, I wanted to simplify the design, or show more intricacy.</p><img src="/2019/04/04/responsive-illuminated-manuscript/animated-responsive.gif" title="Responsive Capital Letter Animation"><h3 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h3><p>I started by identifying some states I wanted to map to small, medium, and large screen sizes.</p><img src="/2019/04/04/responsive-illuminated-manuscript/display-states.png" title="Small, medium, and large states"><p>After creating the graphics, I animated the shapes in After Effects in order to author the animation data to be used in Lottie.<br>The animation timeline starts at the “small” state and progresses to the “large” state.</p><p>I didn’t want to have any animation playing on load, and the state transition be something discoverable only by resizing your page.</p><h4 id="Illustrator-Workflow"><a href="#Illustrator-Workflow" class="headerlink" title="Illustrator Workflow"></a>Illustrator Workflow</h4><p>I tried to create the letter in Illustrator identifying elements I wanted to show in each state:</p><ul><li>Capital E</li><li>Vines</li><li>Flowers</li></ul><p>For all the vines I used the pen tool, this allows to animate the paths by defining a trimming offset as we’ll see later on in After Effects.</p><p>To simplify the workflow, I prefer to separate each shape into its own layer.<br>Make sure the artboard is configure correctly as it will determine the viewBox values of your SVG once exported.</p><p>To create the gold letter I used a freeform gradient, but this doesn’t have any direct counterpart in the web world. These shapes will be rasterized and exported as images, but is good to have a clear understand of what features are <a href="http://airbnb.io/lottie/#/after-effects?id=no-expressions-or-effects" target="_blank" rel="noopener">not supported</a> or are going to use image assets.</p><p>You can inspect the final Illustrator file <a href="./capital-letter.ai">here</a>.</p><h4 id="After-Effects-Workflow"><a href="#After-Effects-Workflow" class="headerlink" title="After Effects Workflow"></a>After Effects Workflow</h4><p>Once the graphics were completed in Illustrator it was time to animate them in After Effects.<br>Import your graphics as composition, and select Layer Size as Footage Dimension.</p><p>In your composition, select the layers you’d like to animates, right click and select<br>Create ▶ Create Shapes From Vector Layer</p><img src="/2019/04/04/responsive-illuminated-manuscript/create-shapes-from-vector-layer.png" title="Create Shapes From Vector Layer"><p>You can now animate the Contents and the Transform for your graphics. In the Illuminated Manuscript animation I used only two techniques:</p><h5 id="Trim-Paths-for-the-vines"><a href="#Trim-Paths-for-the-vines" class="headerlink" title="Trim Paths for the vines"></a>Trim Paths for the vines</h5><p>Expand the shape layers and you’ll see the <em>Add</em> button next to <em>Contents</em>. </p><img src="/2019/04/04/responsive-illuminated-manuscript/vector-shape-layer.png" title="Contents Add"><p>Click it and select <em>Trim Path</em>. You can now animate the offset at the Start and End of the path. </p><img src="/2019/04/04/responsive-illuminated-manuscript/trim-paths.png" title="Trim Paths"><p>Clicking on the stopwatch icon, you’ll add a keyframe in the timeline. Play around with the start and end values to find something suitable for your graphics.</p><h5 id="Transform-for-leaves-and-flowers"><a href="#Transform-for-leaves-and-flowers" class="headerlink" title="Transform for leaves and flowers"></a>Transform for leaves and flowers</h5><p>Animating leaves and flowers is more straightforward. I simply manipulated <em>Scale</em>, <em>Rotation</em>, and <em>Opacity</em> in the Transform group.</p><p>Here’s what your layers might look like at this end of the process:</p><img src="/2019/04/04/responsive-illuminated-manuscript/after-effects-layers.png" title="Animated Vector Shape Layers"><p>For this example I only used linear animations, but you can add a lot more character using easing curves. Try selecting the keyframes and add an Easy Ease curve (F9 + Shift) to notice the difference. The Graph Editor offers even greater control.</p><p>Finally, using the <a href="https://aescripts.com/bodymovin/" target="_blank" rel="noopener">Bodymovin</a> plugin, export the animation data for your composition.</p><p>You can inspect the final After Effects file <a href="./capital-letter.aep">here</a>.</p><h4 id="lottie-web-workflow"><a href="#lottie-web-workflow" class="headerlink" title="lottie-web workflow"></a>lottie-web workflow</h4><p>To pull everything together I used <a href="https://github.com/airbnb/lottie-web" target="_blank" rel="noopener">lottie-web</a>, and looked at <a href="https://github.com/chenqingspring/react-lottie" target="_blank" rel="noopener">react-lottie</a> to get started.</p><p>I created a small react app to determine the initial state of the capital letter based on the width. When a resize event is triggered, based on the size of the page I decide whether the animation should play, and in which <a href="https://github.com/airbnb/lottie-web#setdirectiondirection" target="_blank" rel="noopener">direction</a>.</p><p>I subscribe to <a href="https://github.com/airbnb/lottie-web#setdirectiondirection" target="_blank" rel="noopener">enterFrame</a> events to check if the desired state is reached, and stop the playback.<br>For more complex scenarios, you can also specify <a href="https://github.com/airbnb/lottie-web#playsegmentssegments-forceflag" target="_blank" rel="noopener">animation segments</a>.</p><h3 id="Source-and-Demo"><a href="#Source-and-Demo" class="headerlink" title="Source and Demo"></a>Source and Demo</h3><p>You can check out the final project from <a href="https://github.com/meanme/illuminated-manuscript-lottie" target="_blank" rel="noopener">github</a>, or preview the <a href="https://7o36qor5nq.codesandbox.io" target="_blank" rel="noopener">CodeSandbox</a>.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>While admittedly unpractical, I hope you enjoyed the idea of animated typography in your pages.<br>The execution could be improved, and depending on your needs, simple CSS animations, or even animating <a href="https://css-tricks.com/svg-line-animation-works/" target="_blank" rel="noopener">stroke-dashoffset</a> property might suffice.</p><p>Interestingly enough, the SVG specs at one point defined animations (or <a href="https://www.w3.org/TR/SMIL3/" target="_blank" rel="noopener">SMIL - Synchronized Multimedia Integration Language</a>), and there were proposals to support <a href="http://www.svgopen.org/2004/papers/AdaptiveLoD/" target="_blank" rel="noopener">adaptive Leven of Detail</a> graphics, but due the lack of support, and given how much easier is to author animations in After Effects, in my opinion Lottie is currently the best tool for the job.</p><p>Hope you enjoyed the write up, and took some time to admire an Illuminated Manuscript online.</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;Back in the Middle Ages, must have been a spectacle to lay eye on an &lt;a href=&quot;https://www.khanacademy.org/partner-content/getty-museum/getty-manuscripts/a/what-is-an-illuminated-manuscript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Illuminated Manuscript&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&quot;/2019/04/04/responsive-illuminated-manuscript/illuminated-manuscript-header.jpg&quot; title=&quot;Illuminated Manuscript Detail&quot;&gt;
&lt;p&gt;The fine illustrations, the rich decorative elements, and the beautiful capital letters, bring typography and art together.&lt;/p&gt;
&lt;p&gt;After visiting the &lt;a href=&quot;http://www.getty.edu/art/manuscripts/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Getty’s Manuscripts&lt;/a&gt; I started asking myself - what would a script look like on a web page?&lt;br&gt;Given the incredible amount of minute details, how much could it be appreciated on different form factors?&lt;br&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="http://meanme.com/tags/JavaScript/"/>
    
    <category term="Animations" scheme="http://meanme.com/tags/Animations/"/>
    
    <category term="Lottie" scheme="http://meanme.com/tags/Lottie/"/>
    
  </entry>
  
  <entry>
    <title>Micro-Animations with Lottie</title>
    <link href="http://meanme.com/2017/12/01/micro-animations-with-lottie/"/>
    <id>http://meanme.com/2017/12/01/micro-animations-with-lottie/</id>
    <published>2017-12-02T07:29:08.000Z</published>
    <updated>2023-04-30T22:00:51.254Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/12/01/micro-animations-with-lottie/code-behind-lottie-animation-view.gif" title="Micro-Animations in action"><p>Like when engaging in conversation, if our interlocutor speaks with a monotone and flat voice it becomes harder to pay attention to what they’ve to say and enjoy the exchange. Similarly, a static interface, without any dynamism, is bound to lose some of its users, or at the very list fell dull and unattractive.</p><p>Micro-Animations, or Micro-Interactions, can be the inflexion in the voice, the hand gesture, facial expressions, that help the good orator to tell a story.<br>Through micro-animations the interface can feel more “human”, convey some of those emotions, as well as feel more cohesive.</p><a id="more"></a><p>Micros-Animations are often used to express:</p><ul><li><p><strong>Feedback</strong> - Use animations to convey the state of the application.<br><img src="https://cdn.dribbble.com/users/25514/screenshots/1797373/pull-down-refresh-iphone-app-interface-ux-design-ramotion.gif" alt="Pull Down To Refresh by Ramotion"> Pull Down to Refresh by <a href="https://dribbble.com/shots/1797373-Pull-Down-To-Refresh" target="_blank" rel="noopener">Ramotion</a></p></li><li><p><strong>Action</strong> - Help the user understand the results of their actions<br><img src="https://cdn.dribbble.com/users/50261/screenshots/1426764/submit_button.gif" alt="Submit Button by Colin Garven"> Submit Button by <a href="https://dribbble.com/shots/1426764-Submit-Button" target="_blank" rel="noopener">Colin Garven</a></p></li><li><p><strong>Manipulation</strong> - Emphasize the user’s control over parts of the application<br><img src="https://cdn.dribbble.com/users/107759/screenshots/1030768/dial-demo.gif" alt="Dialin&#39; by UI8"> Dialin’ by <a href="https://dribbble.com/shots/1030768-Dialin" target="_blank" rel="noopener">UI8</a></p></li></ul><h3 id="Design-to-Development"><a href="#Design-to-Development" class="headerlink" title="Design to Development"></a>Design to Development</h3><p>Having tried to define what micro-animations are, <a href="https://dribbble.com/" target="_blank" rel="noopener">dribbble</a> is a wonderful site to explore searching for inspiration.</p><p>Chances are most of the animations are created with designer tools like<br>Adobe After Effects, Principle, Flinto, or Framer - to name a few. How to bring them to life in a completed product then?<br>AirBnB implemented Lottie: a rendering solution for After Effect files that has been widely adopted, and makes it really easy to use animations in your applications. Lottie has been ported to web, iOS, Android, and UWP - which is what I’ll use in this demo.</p><p>To avoid creating your animation in Adobe After Effect from scratch, I used pre-made assets available at <a href="https://www.lottiefiles.com/" target="_blank" rel="noopener">lottie files</a></p><h3 id="LottieUWP"><a href="#LottieUWP" class="headerlink" title="LottieUWP"></a>LottieUWP</h3><p>Now that we’ve defined an animation framework we can putting things together in a new UWP project.</p><p><strong>⚠ Creating a new project make sure you’re using a compatible SDK: Windows Build 10586+</strong></p><p>Fire up Visual Studio, start with a new Blank App (Universal Windows), and bring the LottieUWP NuGet package in your project running:</p><pre class=" language-powershell"><code class="language-powershell">Install<span class="token operator">-</span>Package LottieUWP</code></pre><p>Add the Lottie namespace in your <code>MainPage.xaml</code>:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Page</span>     <span class="token attr-name">...</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>lottieUwp</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>using:LottieUWP<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Page</span><span class="token punctuation">></span></span></code></pre><p>Lottie animations are defined using a json file exported using the the <a href="https://aescripts.com/bodymovin/" target="_blank" rel="noopener">Bodymovin</a> Adobe After Effects plugin. For this demo I’ll use a star animation available at <a href="https://www.lottiefiles.com/72-favourite-app-icon" target="_blank" rel="noopener">LottieFiles created by Michael Harvey</a></p><p>Once the json animation is downloaded, you can render it by either using the <code>LottieAnimationView</code> XAML control, or by defining it in code. A programmatic approach is perferable if you’re going to instantiate components at runtime (i.e. items in a list). I’ve opted for the XAML control in this demo.</p><p>Bodymovin and Lottie allow using raster images in your animations. If you’re using your own files, and image assets are required, make sure you specify the <code>ImageAssetsFolder</code> attribute in your <code>LottieAnimationView</code>.</p><p><strong>⚠ The json animations should be bundled in your application by setting the <em>Build Step</em> as <em>Content</em></strong><br><strong>Otherwise you’ll receive the Error Message: “Unable to find file Assets/favourite_app_icon.json”</strong></p><p><div style="max-width: 550px; margin-left: auto; margin-right: auto; "><img src="/2017/12/01/micro-animations-with-lottie/lottie-json-config-properties.png" title="Properties > Build Action: Content"></div></p><p>Add the <code>LottieAnimationView</code> control to <code>MainPage.xaml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">lottieUwp:</span>LottieAnimationView</span>     <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LottieAnimationView<span class="token punctuation">"</span></span>     <span class="token attr-name">FileName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Assets/favourite_app_icon.json<span class="token punctuation">"</span></span>     <span class="token attr-name">AutoPlay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span>     <span class="token attr-name">Loop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><img src="/2017/12/01/micro-animations-with-lottie/simple-lottie-animation-view.gif" title="Simple Lottie Animation"><h2 id="Controlling-the-animation-via-code"><a href="#Controlling-the-animation-via-code" class="headerlink" title="Controlling the animation via code"></a>Controlling the animation via code</h2><p>To make the example a little more interesting, the animation shuold play in response to a user action.<br>Remove the <strong>AutoPlay</strong> and <strong>Loop</strong> attributes from the Lottie Animation View. We’ll control the animation implementing UIElement’s <strong>Tapped</strong> event handler. Here’s the final XAML code.</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Page</span>    <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MicroAnimationsWithLottie.MainPage<span class="token punctuation">"</span></span>    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml/presentation<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>x</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>local</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>using:MicroAnimationsWithLottie<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/expression/blend/2008<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>mc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.openxmlformats.org/markup-compatibility/2006<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>lottieUwp</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>using:LottieUWP<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>using:Microsoft.Toolkit.Uwp.UI.Controls<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">mc:</span>Ignorable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ThemeResource ApplicationPageBackgroundThemeBrush}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">controls:</span>DropShadowPanel</span>            <span class="token attr-name">HorizontalAlignment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span> <span class="token attr-name">VerticalAlignment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span>            <span class="token attr-name">BlurRadius</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">ShadowOpacity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>398<span class="token punctuation">"</span></span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>White<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BingBackground<span class="token punctuation">"</span></span>                        <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>280<span class="token punctuation">"</span></span>                        <span class="token attr-name">Source</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://c1.staticflickr.com/5/4438/36609628276_bee41dc564_n.jpg<span class="token punctuation">"</span></span>                       <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>280<span class="token punctuation">"</span></span> <span class="token attr-name">Stretch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UniformToFill<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>White<span class="token punctuation">"</span></span> <span class="token attr-name">Orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Horizontal<span class="token punctuation">"</span></span> <span class="token attr-name">HorizontalAlignment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">lottieUwp:</span>LottieAnimationView</span>                         <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LottieAnimationView<span class="token punctuation">"</span></span>                         <span class="token attr-name">Padding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span>                        <span class="token attr-name">FileName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Assets/favourite_app_icon.json<span class="token punctuation">"</span></span> <span class="token attr-name">Tapped</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LottieAnimationView_Tapped<span class="token punctuation">"</span></span>                     <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">controls:</span>DropShadowPanel</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Page</span><span class="token punctuation">></span></span></code></pre><p>The code behind handler in <strong>MainPage.xaml.cs</strong> controls the playback of the animation. When the user clicks, we start by pausing any running animation. If the image is not favorited we’ll play the animation, otherwise we’ll revert to the first frame, with the hollow star, setting the progress to 0. You can find the complete example on <a href="https://github.com/meanme/micro-animations-with-lottie" target="_blank" rel="noopener">GitHub</a></p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">bool</span> IsFavorite <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">LottieAnimationView_Tapped</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> TappedRoutedEventArgs e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>LottieAnimationView<span class="token punctuation">.</span>IsAnimating<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        LottieAnimationView<span class="token punctuation">.</span><span class="token function">PauseAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>IsFavorite<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        LottieAnimationView<span class="token punctuation">.</span><span class="token function">PlayAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        LottieAnimationView<span class="token punctuation">.</span>Progress <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    IsFavorite <span class="token operator">=</span> <span class="token operator">!</span>IsFavorite<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><img src="/2017/12/01/micro-animations-with-lottie/code-behind-lottie-animation-view.gif" title="Control the animation in code"><p>Photo Credits: <a href="https://flic.kr/p/XM4V2w" target="_blank" rel="noopener">CHRISCARMA</a></p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>This quick demo was to share the workflow, from Adobe After Effects to UWP app, and some useful links along the way. Hope you enjoyed it!</p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;/2017/12/01/micro-animations-with-lottie/code-behind-lottie-animation-view.gif&quot; title=&quot;Micro-Animations in action&quot;&gt;
&lt;p&gt;Like when engaging in conversation, if our interlocutor speaks with a monotone and flat voice it becomes harder to pay attention to what they’ve to say and enjoy the exchange. Similarly, a static interface, without any dynamism, is bound to lose some of its users, or at the very list fell dull and unattractive.&lt;/p&gt;
&lt;p&gt;Micro-Animations, or Micro-Interactions, can be the inflexion in the voice, the hand gesture, facial expressions, that help the good orator to tell a story.&lt;br&gt;Through micro-animations the interface can feel more “human”, convey some of those emotions, as well as feel more cohesive.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Animations" scheme="http://meanme.com/tags/Animations/"/>
    
    <category term="UWP" scheme="http://meanme.com/tags/UWP/"/>
    
    <category term="Lottie" scheme="http://meanme.com/tags/Lottie/"/>
    
  </entry>
  
  <entry>
    <title>Trulia&#39;s Affordability Calculator Animations</title>
    <link href="http://meanme.com/2017/10/22/affordability-calculator-animations/"/>
    <id>http://meanme.com/2017/10/22/affordability-calculator-animations/</id>
    <published>2017-10-23T05:58:02.000Z</published>
    <updated>2023-04-30T22:00:51.244Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/10/22/affordability-calculator-animations/piggy-bank.png" title="Piggy Bank"><p>For my daily job at Trulia I had to recently build an affordability calculator to help home buyers find out how much they can afford.</p><p>To make the calculator more lively and fun to use, I had the opportunity to add some animations using the <a href="https://greensock.com/" target="_blank" rel="noopener">GreenSock Animation Platform</a>. Working with the design team is among the most rewarding parts of my job, and I wrote a blog for the company’s tech blog to document the collaboration and the technology behind the calculator:</p><p><a href="https://www.trulia.com/blog/tech/bringing-trulias-affordability-calculator-life-animations/" target="_blank" rel="noopener">Bringing Trulia’s Affordability Calculator to Life with Animations</a></p><p>Hope you enjoy the read!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2017/10/22/affordability-calculator-animations/piggy-bank.png&quot; title=&quot;Piggy Bank&quot;&gt;
&lt;p&gt;For my daily job at Trulia I had to recentl</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://meanme.com/tags/JavaScript/"/>
    
    <category term="Animations" scheme="http://meanme.com/tags/Animations/"/>
    
  </entry>
  
  <entry>
    <title>Pull to Refresh in UWP</title>
    <link href="http://meanme.com/2017/09/06/pull-to-refresh/"/>
    <id>http://meanme.com/2017/09/06/pull-to-refresh/</id>
    <published>2017-09-06T14:53:46.000Z</published>
    <updated>2023-04-30T22:00:51.256Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Pull to Refresh is a widely adopted mobile pattern, used to refresh a list fetching the latest entries.<br>It was originally introduced by Twitter, (<a href="http://appft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&amp;Sect2=HITOFF&amp;u=%2Fnetahtml%2FPTO%2Fsearch-adv.html&amp;r=1&amp;f=G&amp;l=50&amp;d=PG01&amp;p=1&amp;S1=20100199180.PGNR.&amp;OS=dn/20100199180&amp;RS=DN/20100199180" target="_blank" rel="noopener">for which they hold the patent</a>) and is widely used in applications with a feed or timeline where the data is refreshed often.<br>In this post I’ll compare some libraries to implement Pull to Refresh in your Universal Windows Platform application.</p><h2 id="A-case-for-Pull-to-Refresh"><a href="#A-case-for-Pull-to-Refresh" class="headerlink" title="A case for Pull to Refresh"></a>A case for Pull to Refresh</h2><p>Despite the wide spread of the pattern, a case could be made is at times not the best user experience:</p><h4 id="Avoid-When"><a href="#Avoid-When" class="headerlink" title="Avoid When"></a>Avoid When</h4><ul><li>Is not immediately discoverable</li><li>The user is responsible for </li><li>Being a mobile first pattern the UX will be different for different platform</li><li>If the content refresh rate is not frequent enough</li></ul><!-- If you provide enough content to keep the user engaged for the [duration of their session](https://www.statista.com/statistics/202485/average-ipad-app-session-length-by-app-categories/) you might not need to use pull to refresh. --><p>On the other hand, there are cases where pull to Refresh is a great choice:</p><h4 id="Great-When"><a href="#Great-When" class="headerlink" title="Great When"></a>Great When</h4><ul><li>Content updates frequently</li><li>Content follows a chronological sorting</li><li>Is a familiar gesture on mobile</li><li>Provides the opportunity to leverage the area above the list for branding and custom animations</li></ul><p>Pull to Refresh offers the ability to embed your personality and create fun animations, beyond the simple spinner, offering a moment of delight to the users.</p><img src="/2017/09/06/pull-to-refresh/dribble-00.gif" title="Yup Nguyen" alt="s Dribble"><a id="more"></a><img src="/2017/09/06/pull-to-refresh/yelp-03.gif" title="Yelp" alt="s Mascot Hammy launched into space"><h2 id="UWP-Libraries"><a href="#UWP-Libraries" class="headerlink" title="UWP Libraries"></a>UWP Libraries</h2><p>After some research, I found some controls and packages that offer support for Pull to Refresh more or less out of the box. Here’s a comparative analysis of the different options.</p><h3 id="UWP-Control"><a href="#UWP-Control" class="headerlink" title="UWP Control"></a><a href="https://docs.microsoft.com/en-us/windows/uwp/controls-and-patterns/pull-to-refresh" target="_blank" rel="noopener">UWP Control</a></h3><p>In the official Microsoft docs, Pull to Refresh is implemented with a <a href="https://github.com/Microsoft/Windows-universal-samples/blob/master/Samples/XamlPullToRefresh/cs/RefreshableListView.cs" target="_blank" rel="noopener">RefreshableListView</a> Templated Control, that extends a ListView.</p><img src="/2017/09/06/pull-to-refresh/pull-to-refresh-00.gif" title="UWP Control"><p>The component will monitor direct manipulation of the list’s internal ScrollViewer, fire relevant events when the refresh is triggered or the pull progress changes. Noticeably this control exposes two scalar properties: <strong>PullRatio</strong> and <strong>PullProgress</strong>, to be used the ScrollViewer state and the refresh indicator layout.</p><p>Customizing this Pull to Refresh implementation required the most code changes, but provides a comprehensive set of options for customization, as it exposes every relevant aspect of this pattern. </p><h3 id="PulltToRefresh-UWP"><a href="#PulltToRefresh-UWP" class="headerlink" title="PulltToRefresh.UWP"></a><a href="https://github.com/MS-UAP/PullToRefresh.UWP" target="_blank" rel="noopener">PulltToRefresh.UWP</a></h3><img src="/2017/09/06/pull-to-refresh/pull-to-refresh-01.gif" title="PullToRefresh.UWP"><p>This implementation comes bundled in a NuGet package so in the Package Manager you can simply type</p><pre class=" language-bash"><code class="language-bash">PM<span class="token operator">></span> Install-Package PullToRefresh.UWP</code></pre><p>In your XAML add the namespace reference</p><pre class=" language-xaml"><code class="language-xaml">xmlns:pr="using:PullToRefresh.UWP"</code></pre><p>and you can start using the <code>PullToRefreshBox</code> component to wrap a ListView or GridView and enable Pull to Refresh. The final XAML will look something like:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">pr:</span>PullToRefreshBox</span> <span class="token attr-name">RefreshInvoked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PullToRefreshBox_RefreshInvoked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">pr:</span>PullToRefreshBox.TopIndicatorTemplate</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DataTemplate</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">pr:</span>PullRefreshProgressControl</span>               <span class="token attr-name">Progress</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{Binding}<span class="token punctuation">"</span></span>              <span class="token attr-name">PullToRefreshText</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Pull<span class="token punctuation">"</span></span>              <span class="token attr-name">ReleaseToRefreshText</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Release<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DataTemplate</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">pr:</span>PullToRefreshBox.TopIndicatorTemplate</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView.ItemTemplate</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DataTemplate</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Rectangle</span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Rectangle.Fill</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SolidColorBrush</span> <span class="token attr-name">Color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{Binding}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Rectangle.Fill</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Rectangle</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DataTemplate</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListView.ItemTemplate</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListView</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">pr:</span>PullToRefreshBox</span><span class="token punctuation">></span></span></code></pre><p>Internally, PullToRefresh.UWP overrides <strong>OnApplyTemplate</strong> to center the top content indicator and register a callback for the ScrollViewer direct manipulation event. Once the drag gesture is released the control checks if the threshold for a refresh has been triggered.</p><p>I like the ease of use of this control. If a simple indicator will suffice, and you don’t need access to the underlying state PullToRefresh.UWP comes really handy.</p><h3 id="JustinXinLiu’s-Pull-To-Refresh-XAML"><a href="#JustinXinLiu’s-Pull-To-Refresh-XAML" class="headerlink" title="JustinXinLiu’s Pull To Refresh XAML"></a><a href="https://github.com/JustinXinLiu/PullToRefreshUWP_WindowsComposition" target="_blank" rel="noopener">JustinXinLiu’s Pull To Refresh XAML</a></h3><p>After finding the UWP Control and PullToRefresh.UWP I kept searching and found Justin’s Pull to Refresh XAML project on GitHub.</p><p>One shortcoming of the two previous libraries is that the refresh indicator disappears upon release, and doesn’t remain on screen while the data fetching is in progress. Justin’s Pull to Refresh XAML obviates to this problem registering event handlers for the composition target’s rendering and manipulating the top section offset using composition animations:</p><pre class=" language-csharp"><code class="language-csharp">Windows<span class="token punctuation">.</span>UI<span class="token punctuation">.</span>Xaml<span class="token punctuation">.</span>Media<span class="token punctuation">.</span>CompositionTarget<span class="token punctuation">.</span>Rendering <span class="token operator">+</span><span class="token operator">=</span> OnCompositionTargetRendering<span class="token punctuation">;</span></code></pre><p>Composition animations are used to update the opacity and vertical offset of the refresh icon. When the icon is pulled down fast enough to trigger the refresh, the ScrollViewer Offset.Y is locked in place until the fetch is complete and the composition animations are restored. In the <a href="https://github.com/JustinXinLiu/PullToRefreshUWP_WindowsComposition" target="_blank" rel="noopener">Github repo</a> you can find different implementation variants using Composition animations and XAML Behavior triggers.</p><p>I found Justin’s Pull to Refresh the easiest to adopt and by leveraging Composition animations customizing the animation parameters becomes very easy. Here’s a final demo using Pull to Refresh to populate a list of airports. The refresh indicator animation is performed using AirBnB’s <a href="https://airbnb.design/introducing-lottie/" target="_blank" rel="noopener">Lottie</a> for <a href="https://github.com/azchohfi/LottieUWP" target="_blank" rel="noopener">UWP</a>, and re-purposing some of the <a href="https://www.lottiefiles.com/" target="_blank" rel="noopener">sample files</a>.</p><img src="/2017/09/06/pull-to-refresh/pull-to-refresh-02.gif" title="Justin Liu" alt="s PullToRefreshXaml Demo"><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Whether or not Pull to Refresh is the right pattern varies from case to case, but when user experience calls for it, I see it as an opportunity to inject some personality and delight into the application.</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;Pull to Refresh is a widely adopted mobile pattern, used to refresh a list fetching the latest entries.&lt;br&gt;It was originally introduced by Twitter, (&lt;a href=&quot;http://appft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&amp;amp;Sect2=HITOFF&amp;amp;u=%2Fnetahtml%2FPTO%2Fsearch-adv.html&amp;amp;r=1&amp;amp;f=G&amp;amp;l=50&amp;amp;d=PG01&amp;amp;p=1&amp;amp;S1=20100199180.PGNR.&amp;amp;OS=dn/20100199180&amp;amp;RS=DN/20100199180&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;for which they hold the patent&lt;/a&gt;) and is widely used in applications with a feed or timeline where the data is refreshed often.&lt;br&gt;In this post I’ll compare some libraries to implement Pull to Refresh in your Universal Windows Platform application.&lt;/p&gt;
&lt;h2 id=&quot;A-case-for-Pull-to-Refresh&quot;&gt;&lt;a href=&quot;#A-case-for-Pull-to-Refresh&quot; class=&quot;headerlink&quot; title=&quot;A case for Pull to Refresh&quot;&gt;&lt;/a&gt;A case for Pull to Refresh&lt;/h2&gt;&lt;p&gt;Despite the wide spread of the pattern, a case could be made is at times not the best user experience:&lt;/p&gt;
&lt;h4 id=&quot;Avoid-When&quot;&gt;&lt;a href=&quot;#Avoid-When&quot; class=&quot;headerlink&quot; title=&quot;Avoid When&quot;&gt;&lt;/a&gt;Avoid When&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Is not immediately discoverable&lt;/li&gt;
&lt;li&gt;The user is responsible for &lt;/li&gt;
&lt;li&gt;Being a mobile first pattern the UX will be different for different platform&lt;/li&gt;
&lt;li&gt;If the content refresh rate is not frequent enough&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- If you provide enough content to keep the user engaged for the [duration of their session](https://www.statista.com/statistics/202485/average-ipad-app-session-length-by-app-categories/) you might not need to use pull to refresh. --&gt;
&lt;p&gt;On the other hand, there are cases where pull to Refresh is a great choice:&lt;/p&gt;
&lt;h4 id=&quot;Great-When&quot;&gt;&lt;a href=&quot;#Great-When&quot; class=&quot;headerlink&quot; title=&quot;Great When&quot;&gt;&lt;/a&gt;Great When&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Content updates frequently&lt;/li&gt;
&lt;li&gt;Content follows a chronological sorting&lt;/li&gt;
&lt;li&gt;Is a familiar gesture on mobile&lt;/li&gt;
&lt;li&gt;Provides the opportunity to leverage the area above the list for branding and custom animations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pull to Refresh offers the ability to embed your personality and create fun animations, beyond the simple spinner, offering a moment of delight to the users.&lt;/p&gt;
&lt;img src=&quot;/2017/09/06/pull-to-refresh/dribble-00.gif&quot; title=&quot;Yup Nguyen&quot; alt=&quot;s Dribble&quot;&gt;</summary>
    
    
    
    
    <category term="UWP" scheme="http://meanme.com/tags/UWP/"/>
    
  </entry>
  
  <entry>
    <title>Unity Interoperability</title>
    <link href="http://meanme.com/2017/08/10/unity-interoperability/"/>
    <id>http://meanme.com/2017/08/10/unity-interoperability/</id>
    <published>2017-08-11T05:58:45.000Z</published>
    <updated>2023-04-30T22:00:51.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>In this post I want to explore the interoperability between UWP XAML apps and Unity. Specifically, I wanted to embed my Unity view inside a UWP app, and be able to call methods from UWP to interact with the Unity view.</p><p>After some research, I found the <a href="https://github.com/Microsoft/uwp-experiences/tree/master/apps/weather" target="_blank" rel="noopener">Atmosphere weather app example</a>, demonstrating interoperability between UWP and Unity. Is a fantastic resource and I recommend checking it out. We’ll go over step by step and create something similar, building a small low poly town.</p><img src="/2017/08/10/unity-interoperability/live-00.png" title="Low Poly Town UWP Unity Interoperability"><a id="more"></a><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p>Visual Studio 2015 RTM, (the minimum version is 14.0.23107.0). Please note that earlier versions, for example Visual Studio RC, are not supported in Unity 5.2.</p><p>The Unity assets used for the project are Area730’s <a href="https://www.assetstore.unity3d.com/en/#!/content/50095" target="_blank" rel="noopener">Stylized Simple Cartoon City</a> and Demigiant’s <a href="https://www.assetstore.unity3d.com/en/#!/content/27676" target="_blank" rel="noopener">DOTween</a>.</p><h2 id="Build-Settings"><a href="#Build-Settings" class="headerlink" title="Build Settings"></a>Build Settings</h2><p>In your Unity scripts you can declare <code>static</code> fields and access them from UWP. In the <code>MonoBehavior</code>‘s update loop you can keep track of changes and update your Unity view accordingly.</p><p>If you need to pass data from Unity to UWP you can declare a <code>static</code> <code>EventHandler</code> in Unity, and register callbacks in UWP.</p><p>Once you’ve implemented your logic, head to the Build Settings and configure your project. Use the following settings:</p><ul><li>Select <strong>Windows Store</strong> as your Platform</li><li>Set <em>UWP Build Type</em> to <strong>XAML</strong></li><li>Enable <strong>Unity C# Projects</strong></li></ul><img src="/2017/08/10/unity-interoperability/build-settings.png" title="Build Settings"><p>If you don’t have the Windows Store platform installed, Unity will prompt you to install (the download is named Metro Support).</p><p>Selecting XAML instead of D3D for your build type will render the Unity game using a <a href="https://docs.microsoft.com/en-us/uwp/api/Windows.UI.Xaml.Controls.SwapChainPanel" target="_blank" rel="noopener">SwapChainPanel</a> XAML control, used to render DirectX graphics within a XAML View.</p><h2 id="Integrating-Unity-in-UWP"><a href="#Integrating-Unity-in-UWP" class="headerlink" title="Integrating Unity in UWP"></a>Integrating Unity in UWP</h2><p>Open the newly generated solution in Visual Studio and take a look at the Solution explorer.</p><img src="/2017/08/10/unity-interoperability/solution-explorer.png" title="Solution Explorer"><p>In the <em>Assembly-CSharp</em> project you’ll find all the Unity runtime Scripts. Meanwhile the last project is the entry point for the UWP application. In <code>MainPage.xaml</code> you’ll see the generated SwapChainPanel used to render the Unity view:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SwapChainPanel</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DXSwapChainPanel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ExtendedSplashGrid<span class="token punctuation">"</span></span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FFFFFF<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ExtendedSplashImage<span class="token punctuation">"</span></span>             <span class="token attr-name">Source</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Assets/SplashScreen.png<span class="token punctuation">"</span></span>             <span class="token attr-name">VerticalAlignment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span>             <span class="token attr-name">HorizontalAlignment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SwapChainPanel</span><span class="token punctuation">></span></span></code></pre><p>For this demo I have added a <code>ListView</code> in <code>MainPage.xaml</code>. Clicking on the items in the list will dynamically add a game object in the Unity view.<br>From the ItemClick handler in <code>MainView.xaml.cs</code> I call the static method  defined in my Unity script to instantiate a new prefab.</p><h2 id="Assets-Loaded"><a href="#Assets-Loaded" class="headerlink" title="Assets Loaded"></a>Assets Loaded</h2><p>Unity views will take a little longer to load. If you try to interact with the Unity view before it’s loaded you’ll encounter unexpected results. One solution is to register an event handler in your Unity scripts and check when the assets are loaded in your UWP code before interacting with the Unity view.</p><p>For example, in your Unity Controller add a new event</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">event</span> EventHandler AssetsLoaded<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>AssetsLoaded <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">AssetsLoaded</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>And in your UWP code behind register the corresponding event handler:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token keyword">void</span> <span class="token function">OnNavigatedTo</span><span class="token punctuation">(</span>NavigationEventArgs e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnNavigatedTo</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    MyUnitytController<span class="token punctuation">.</span>AssetsLoaded <span class="token operator">+</span><span class="token operator">=</span> MyUnitytController_AssetsLoaded<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">MyUnitytController_AssetsLoaded</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> EventArgs e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// The Unity view is loaded! 😁🎉</span>    <span class="token comment" spellcheck="true">// You can start calling the methods defined in unity scripts</span><span class="token punctuation">}</span></code></pre><p>This is especially useful if for example you’ve seed data you need to pass as soon as the Unity view is available.</p><p>Lastly, since it would be jarring to launch a UWP application full screen I like to tweak <code>UnityGenerated.cs</code> and changed the preferred launch window mode from full screen to auto:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// Change from FullScreen to Auto</span>ApplicationView<span class="token punctuation">.</span>PreferredLaunchWindowingMode <span class="token operator">=</span> ApplicationViewWindowingMode<span class="token punctuation">.</span>Auto<span class="token punctuation">;</span></code></pre><h2 id="Thread-Safety"><a href="#Thread-Safety" class="headerlink" title="Thread-Safety"></a>Thread-Safety</h2><p>We’ve achieve basic interoperability between UWP and Unity. You can access static variables and methods defined in the <code>MonoBehaviour</code>s and leverage events.</p><p>But if you attempt invoking methods that need to run on Unity’s main thread, for example trying to instantiate a new game object, you’ll soon encounter this exception:</p><figcaption>can only be called from the main thread.</figcaption><pre class=" language-Load"><code class="language-Load">Constructors and field initializers will be executed from the loading thread when loading a scene.Don't use this function in the constructor or field initializers, instead move initialization code to the Awake or Start function.</code></pre><p>This is because Unity is not thread-safe, and you’re required to perform Unity API calls exclusively from the main thread.</p><p>Knowing this limitation, you can easily get around it by creating a Unity singleton that polls for changes. Method invocations are queued, and processed in the singleton’s update method to ensure they are called from Unity’s main thread.</p><p>I’m my demo I’ve used Pim DeWitte’s UnityMainThreadDispatcher available on <a href="https://github.com/PimDeWitte/UnityMainThreadDispatcher" target="_blank" rel="noopener">github</a>.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Here’s the finished result running on mobile and on desktop.</p><img src="/2017/08/10/unity-interoperability/low-poly-city.gif" title="Low Poly City"><p>You can also check out the project on <a href="https://github.com/meanme/low-poly-city" target="_blank" rel="noopener">github</a>.</p><p>It was a fun experiment. I do admit, if the end goal was simply displaying a list of prefabs, Unity’s native UI could have been a simpler option. But interoperability with UWP opens a vast realm of interesting possibilities.</p><p>Imagine for example leveraging Cortana, InkCanvas or even Eye Control to control you Unity view. Could also be a novel way to approach data visualization, animating 3D models in Unity instead of displaying charts.</p><p>I hope you found this article interesting and enjoyed it. Let me know if it sparks the creativity for something new.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;In this post I want to explore the interoperability between UWP XAML apps and Unity. Specifically, I wanted to embed my Unity view inside a UWP app, and be able to call methods from UWP to interact with the Unity view.&lt;/p&gt;
&lt;p&gt;After some research, I found the &lt;a href=&quot;https://github.com/Microsoft/uwp-experiences/tree/master/apps/weather&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Atmosphere weather app example&lt;/a&gt;, demonstrating interoperability between UWP and Unity. Is a fantastic resource and I recommend checking it out. We’ll go over step by step and create something similar, building a small low poly town.&lt;/p&gt;
&lt;img src=&quot;/2017/08/10/unity-interoperability/live-00.png&quot; title=&quot;Low Poly Town UWP Unity Interoperability&quot;&gt;</summary>
    
    
    
    
    <category term="Unity" scheme="http://meanme.com/tags/Unity/"/>
    
    <category term="UWP" scheme="http://meanme.com/tags/UWP/"/>
    
  </entry>
  
  <entry>
    <title>UWP Sticky Header</title>
    <link href="http://meanme.com/2017/07/11/sticky-header/"/>
    <id>http://meanme.com/2017/07/11/sticky-header/</id>
    <published>2017-07-12T02:03:36.000Z</published>
    <updated>2023-04-30T22:00:51.349Z</updated>
    
    <content type="html"><![CDATA[<h3 id="A-Familiar-UX"><a href="#A-Familiar-UX" class="headerlink" title="A Familiar UX"></a>A Familiar UX</h3><p>When thinking about user navigation we often look at the top of the page, scouting for navigation links, a menu, or a search bar somewhere in the top header.</p><p>Try playing a round of <a href="http://dedesigntheweb.com" target="_blank" rel="noopener">Design the Web</a>, where you’ve to guess the site from its mocks, to see how many desktop applications display a prominent header at the top.</p><p>Familiarity can be good and in this post I will go over implementing a shrinking sticky header. After scrolling our page the header will shrink and remain visible, anchored at the top.</p><img src="/2017/07/11/sticky-header/sticky-header-complete-710.gif" title="Final Result"><a id="more"></a><h3 id="Composition-Animations"><a href="#Composition-Animations" class="headerlink" title="Composition Animations"></a>Composition Animations</h3><p>To drive the scale and the position of our header elements we are going to use expression animations. The position of the main outer ScrollViewer is going to be used in our expressions to determine the progress of the other animations.</p><p>Windows 10 Creators Update introduced <strong>ManipulationPropertySet</strong>, a special type of <a href="https://docs.microsoft.com/en-us/uwp/api/Windows.UI.Composition.CompositionPropertySet" target="_blank" rel="noopener">CompositionPropertySet</a> that exposes the properties in a ScrollViewer. To see how far down we’ve scrolled we can simply read the Translation.Y value from the set. You can access the ManipulationPropertySet of other controls like (i.e. ListView, GridView, etc.) but for our sticky header we’re going to use the main outer ScrollViewer.</p><p>Here’s a prototype showing a sequential break down of the animations happening behind the scenes of our UWP app.</p><img src="/2017/07/11/sticky-header/sticky-header-animations-prototype.gif" title="Animation Prototype"><h3 id="XAML"><a href="#XAML" class="headerlink" title="XAML"></a>XAML</h3><p>The XAML View will be very simple. All the content is going to be wrapped in a ScrollViewer. Inside the ScrollViewer we’re going to have a Grid with 2 rows: the header and the rest of the content.<br>Here’s the XAML markup:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ScrollViewer</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MainScrollViewer<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MainContentsGrid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid.RowDefinitions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RowDefinition</span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Auto<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RowDefinition</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid.RowDefinitions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MainContents<span class="token punctuation">"</span></span> <span class="token attr-name">Grid.Row</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Rectangle</span> <span class="token attr-name">Fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#DAECF4<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Rectangle</span> <span class="token attr-name">Fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#91C5DD<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Rectangle</span> <span class="token attr-name">Fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#DAECF4<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Rectangle</span> <span class="token attr-name">Fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#91C5DD<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Rectangle</span> <span class="token attr-name">Fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#DAECF4<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Rectangle</span> <span class="token attr-name">Fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#91C5DD<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Rectangle</span> <span class="token attr-name">Fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#DAECF4<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Rectangle</span> <span class="token attr-name">Fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#91C5DD<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Rectangle</span> <span class="token attr-name">Fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#DAECF4<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Rectangle</span> <span class="token attr-name">Fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#91C5DD<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ScrollHeader<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">Orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Horizontal<span class="token punctuation">"</span></span> <span class="token attr-name">Background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#2D2D30<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Border</span>                    <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HeaderLogo<span class="token punctuation">"</span></span>                    <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>                    <span class="token attr-name">BorderThickness</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Ellipse</span> <span class="token attr-name">Fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{StaticResource HeaderLogoGradient}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Border</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span> <span class="token attr-name">VerticalAlignment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span>                     <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HeaderText<span class="token punctuation">"</span></span> <span class="token attr-name">FontSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span>                     <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sticky Header<span class="token punctuation">"</span></span> <span class="token attr-name">Foreground</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FFFFFF<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ScrollViewer</span><span class="token punctuation">></span></span></code></pre><p>Lastly, add a <code>Loaded</code> event handler to your Page. We’re going to move to the code behind next to implement the composition animations for our header.</p><h3 id="Loaded"><a href="#Loaded" class="headerlink" title="Loaded"></a>Loaded</h3><p>In our Loaded handler we’ve to perform the following operations</p><ul><li>Get the Manipulation Property Set from the MainScrollViewer</li><li>Define an expression animation to “lock” the translation of our sticky header</li><li>Define an expression to determine the progress of our animations based on the translation of the scroller</li><li>Define the animations to scale or move the visual elements in our sticky header</li></ul><p>Let’s start obtaining the Manipulation Property Set and defining our progress expression: we want the animations to go from 0 to 100% after scrolling 100 pixels.<br>We are going to reuse the progress expression in our animations moving forward. In the case of the scroll header we’re going to cap how far the element can go offscreen to only 50 pixels.</p><pre class=" language-csharp"><code class="language-csharp">CompositionPropertySet scrollerPropertySet <span class="token operator">=</span> ElementCompositionPreview<span class="token punctuation">.</span><span class="token function">GetScrollViewerManipulationPropertySet</span><span class="token punctuation">(</span>MainScrollViewer<span class="token punctuation">)</span><span class="token punctuation">;</span>Compositor compositor <span class="token operator">=</span> scrollerPropertySet<span class="token punctuation">.</span>Compositor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Get the visual that represents our HeaderTextBlock </span><span class="token comment" spellcheck="true">// And define the progress animation string</span><span class="token keyword">var</span> headerVisual <span class="token operator">=</span> ElementCompositionPreview<span class="token punctuation">.</span><span class="token function">GetElementVisual</span><span class="token punctuation">(</span>ScrollHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>String progress <span class="token operator">=</span> <span class="token string">"Clamp(Abs(scroller.Translation.Y) / 100.0, 0.0, 1.0)"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create the expression and add in our progress string.</span><span class="token keyword">var</span> textExpression <span class="token operator">=</span> compositor<span class="token punctuation">.</span><span class="token function">CreateExpressionAnimation</span><span class="token punctuation">(</span><span class="token string">"Lerp(1.5, 1, "</span> <span class="token operator">+</span> progress <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textExpression<span class="token punctuation">.</span><span class="token function">SetReferenceParameter</span><span class="token punctuation">(</span><span class="token string">"scroller"</span><span class="token punctuation">,</span> scrollerPropertySet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Shift the header by 50 pixels when scrolling down</span><span class="token keyword">var</span> offsetExpression <span class="token operator">=</span> compositor<span class="token punctuation">.</span><span class="token function">CreateExpressionAnimation</span><span class="token punctuation">(</span>$<span class="token string">"-scroller.Translation.Y - {progress} * 50"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>offsetExpression<span class="token punctuation">.</span><span class="token function">SetReferenceParameter</span><span class="token punctuation">(</span><span class="token string">"scroller"</span><span class="token punctuation">,</span> scrollerPropertySet<span class="token punctuation">)</span><span class="token punctuation">;</span>headerVisual<span class="token punctuation">.</span><span class="token function">StartAnimation</span><span class="token punctuation">(</span><span class="token string">"Offset.Y"</span><span class="token punctuation">,</span> offsetExpression<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Play around with it to get a feel of what’s going on.<br>Running the app right now you’ll see the vertical offset of the header is constrained when scrolling past the threshold.</p><img src="/2017/07/11/sticky-header/sticky-header-only-710.gif" title="Sticky Header Vertical Offset Constrain"><p>Next, we need to animate the logo. We need to change the scale as well as the position to make sure it remains centered. The top 50 pixels of the header are disappearing above the top of the page, so we’ll push the logo down by the same amount.</p><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// Logo scale and transform</span><span class="token keyword">var</span> logoHeaderScaleAnimation <span class="token operator">=</span> compositor<span class="token punctuation">.</span><span class="token function">CreateExpressionAnimation</span><span class="token punctuation">(</span><span class="token string">"Lerp(Vector2(1,1), Vector2(0.5, 0.5), "</span> <span class="token operator">+</span> progress <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logoHeaderScaleAnimation<span class="token punctuation">.</span><span class="token function">SetReferenceParameter</span><span class="token punctuation">(</span><span class="token string">"scroller"</span><span class="token punctuation">,</span> scrollerPropertySet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> logoVisual <span class="token operator">=</span> ElementCompositionPreview<span class="token punctuation">.</span><span class="token function">GetElementVisual</span><span class="token punctuation">(</span>HeaderLogo<span class="token punctuation">)</span><span class="token punctuation">;</span>logoVisual<span class="token punctuation">.</span><span class="token function">StartAnimation</span><span class="token punctuation">(</span><span class="token string">"Scale.xy"</span><span class="token punctuation">,</span> logoHeaderScaleAnimation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> logoVisualOffsetAnimation <span class="token operator">=</span> compositor<span class="token punctuation">.</span><span class="token function">CreateExpressionAnimation</span><span class="token punctuation">(</span>$<span class="token string">"Lerp(0, 50, {progress})"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logoVisualOffsetAnimation<span class="token punctuation">.</span><span class="token function">SetReferenceParameter</span><span class="token punctuation">(</span><span class="token string">"scroller"</span><span class="token punctuation">,</span> scrollerPropertySet<span class="token punctuation">)</span><span class="token punctuation">;</span>logoVisual<span class="token punctuation">.</span><span class="token function">StartAnimation</span><span class="token punctuation">(</span><span class="token string">"Offset.Y"</span><span class="token punctuation">,</span> logoVisualOffsetAnimation<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The last piece is the text. We’re simply going to change the offset, and use a Vector3 in the expression for a change.</p><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// Offset the header title</span>Visual textVisual <span class="token operator">=</span> ElementCompositionPreview<span class="token punctuation">.</span><span class="token function">GetElementVisual</span><span class="token punctuation">(</span>HeaderText<span class="token punctuation">)</span><span class="token punctuation">;</span>Vector3 finalOffset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> headerOffsetAnimation <span class="token operator">=</span> compositor<span class="token punctuation">.</span><span class="token function">CreateExpressionAnimation</span><span class="token punctuation">(</span>$<span class="token string">"Lerp(Vector3(0,0,0), finalOffset, {progress})"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>headerOffsetAnimation<span class="token punctuation">.</span><span class="token function">SetReferenceParameter</span><span class="token punctuation">(</span><span class="token string">"scroller"</span><span class="token punctuation">,</span> scrollerPropertySet<span class="token punctuation">)</span><span class="token punctuation">;</span>headerOffsetAnimation<span class="token punctuation">.</span><span class="token function">SetVector3Parameter</span><span class="token punctuation">(</span><span class="token string">"finalOffset"</span><span class="token punctuation">,</span> finalOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>textVisual<span class="token punctuation">.</span><span class="token function">StartAnimation</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>Visual<span class="token punctuation">.</span>Offset<span class="token punctuation">)</span><span class="token punctuation">,</span> headerOffsetAnimation<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>All set! Running the application now you can observe the sticky header.</p><img src="/2017/07/11/sticky-header/sticky-header-complete-710.gif" title="Sticky Header Completed"><p>Expression animations allow to use the state of your controls to achieve great results with just few lines of code.<br>Hope you enjoyed this article and get to create something fun with composition animations. Check out the source code on <a href="https://github.com/meanme/uwp-sticky-header" target="_blank" rel="noopener">Github</a> and don’t hesitate to reach out if you have any feedback!</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;A-Familiar-UX&quot;&gt;&lt;a href=&quot;#A-Familiar-UX&quot; class=&quot;headerlink&quot; title=&quot;A Familiar UX&quot;&gt;&lt;/a&gt;A Familiar UX&lt;/h3&gt;&lt;p&gt;When thinking about user navigation we often look at the top of the page, scouting for navigation links, a menu, or a search bar somewhere in the top header.&lt;/p&gt;
&lt;p&gt;Try playing a round of &lt;a href=&quot;http://dedesigntheweb.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Design the Web&lt;/a&gt;, where you’ve to guess the site from its mocks, to see how many desktop applications display a prominent header at the top.&lt;/p&gt;
&lt;p&gt;Familiarity can be good and in this post I will go over implementing a shrinking sticky header. After scrolling our page the header will shrink and remain visible, anchored at the top.&lt;/p&gt;
&lt;img src=&quot;/2017/07/11/sticky-header/sticky-header-complete-710.gif&quot; title=&quot;Final Result&quot;&gt;</summary>
    
    
    
    
    <category term="Animations" scheme="http://meanme.com/tags/Animations/"/>
    
    <category term="UWP" scheme="http://meanme.com/tags/UWP/"/>
    
  </entry>
  
  <entry>
    <title>Intro to Composition Animations</title>
    <link href="http://meanme.com/2017/07/11/intro-to-composition-animations/"/>
    <id>http://meanme.com/2017/07/11/intro-to-composition-animations/</id>
    <published>2017-07-12T02:03:29.000Z</published>
    <updated>2023-04-30T22:00:51.247Z</updated>
    
    <content type="html"><![CDATA[<h3 id="An-animated-galaxy"><a href="#An-animated-galaxy" class="headerlink" title="An animated galaxy"></a>An animated galaxy</h3><p>In this article we’re going to create a small galaxy using some of the available animation systems available with the Windows.UI.Composition. Here’s a quick look of what the completed project is going to look like.</p><img src="/2017/07/11/intro-to-composition-animations/composition-animation-demo-complete-60-1.gif" title="Completed UWP Galaxy"><p>By default some UWP components have subtle animations, ListView and GridView for example will animate the entrance and removal of items.<br>Additionally, you can define storyboard animations directly in your XAML code and trigger them with VisualStateManager’s states.</p><p>In some other cases, you might want to animate visual elements directly, accessing individual properties, or maybe orchestrating multiple animations together.<br>For those scenarios Composition animations come in handy as they allow for direct access to Visual Layer, granting greater flexibility.<br>Composition animations come in two flavors: Keyframe animations and Expression animations. For our galaxy demo we’re going to employ both. So let’s dive into the code.</p><a id="more"></a><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>The requirements for our project are simple: we’d like to have a planet rotating on an orbit around the main star, as well as a satellite completing its rotation 3 times as fast as the planet. I’m going to start from an empty project and focus on the XAML view at first, and then move on to the code behind to add the required logic.</p><h3 id="XAML-View"><a href="#XAML-View" class="headerlink" title="XAML View"></a>XAML View</h3><p>Let’s go ahead and create a new project, then add the following code to MinPage.xml:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Orbit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Planet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Ellipse</span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">Fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DarkGreen<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Ellipse</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Satellite<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span> <span class="token attr-name">Fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DarkGray<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span></code></pre><p>If you now look at the preview you’ll see 3 ellipses stacked on top of each other. Nothing special so far but is worth pointing out both the outer orbit and the planet’s orbit are grouped using Grid elements. This makes it easier to apply the rotation to the grids and affect everything inside at once.</p><p>Nothing much going on so far so let’s start working on the animations in the code behind file. Open MainPage.xaml.cs and implement a new handler for the <code>Loaded</code> event.<br>Inside the handler we’re going to get a reference to the visual elements we need, define the animations and use the animations to change some of the visual objects animatable properties.</p><h3 id="Visual-objects"><a href="#Visual-objects" class="headerlink" title="Visual objects"></a>Visual objects</h3><p>Before diving into the code and spinning celestial bodies around, what is a <a href="https://docs.microsoft.com/en-us/uwp/api/Windows.UI.Composition.Visual" target="_blank" rel="noopener">Visual</a> object? In order to be rendered our XAML controls still have to go through UWP’s Visual Layer. XAML controls are a text representation that still needs to be translated into a format that can be rendered on a screen.<br><a href="https://docs.microsoft.com/en-us/uwp/api/Windows.UI.Xaml.Hosting.ElementCompositionPreview" target="_blank" rel="noopener">ElementCompositionPreview</a> allows developers to get access to the Visual instance given its corresponding component.</p><p>Another important class worth researching when working with animations is UWP’s <a href="https://docs.microsoft.com/en-us/uwp/api/Windows.UI.Composition.Compositor" target="_blank" rel="noopener">Compositor</a> - a factory for several Windows.UI.Composition objects, including the animations we’re going to need for this demo.</p><h3 id="MainPage-Code-Behind"><a href="#MainPage-Code-Behind" class="headerlink" title="MainPage Code Behind"></a>MainPage Code Behind</h3><p>We’re ready to work on MainPage.xaml.cs - open the file and add a new <code>Loaded</code> event handler</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">MainPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Loaded <span class="token operator">+</span><span class="token operator">=</span> MainPage_Loaded<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">MainPage_Loaded</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> RoutedEventArgs e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Our code will be here</span><span class="token punctuation">}</span></code></pre><p>We’re going to create our first KeyFrame animation to perform a full orbit every 10 seconds. Add the following code inside the Loaded handler:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// Get a reference to the compositor object for the current page</span>Compositor compositor <span class="token operator">=</span> ElementCompositionPreview<span class="token punctuation">.</span><span class="token function">GetElementVisual</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Compositor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Get a reference to the outer orbit visual object</span>orbitVisual <span class="token operator">=</span> ElementCompositionPreview<span class="token punctuation">.</span><span class="token function">GetElementVisual</span><span class="token punctuation">(</span>Orbit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create a new animation using Compositor's factory methods</span><span class="token keyword">var</span> orbitAnimation <span class="token operator">=</span> compositor<span class="token punctuation">.</span><span class="token function">CreateScalarKeyFrameAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// This is how long the animation is going to last</span>orbitAnimation<span class="token punctuation">.</span>Duration <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// How many times is the animation going to repeat - infinite loop</span>orbitAnimation<span class="token punctuation">.</span>IterationBehavior <span class="token operator">=</span> AnimationIterationBehavior<span class="token punctuation">.</span>Forever<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// At the end of the animation the end value is 360, and we're using a linear easing </span>orbitAnimation<span class="token punctuation">.</span><span class="token function">InsertKeyFrame</span><span class="token punctuation">(</span><span class="token number">1f</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span> compositor<span class="token punctuation">.</span><span class="token function">CreateLinearEasingFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// By default the Grid's center will be the top left corner of the page, let's center it</span>orbitVisual<span class="token punctuation">.</span>CenterPoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>Window<span class="token punctuation">.</span>Current<span class="token punctuation">.</span>Bounds<span class="token punctuation">.</span>Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>Window<span class="token punctuation">.</span>Current<span class="token punctuation">.</span>Bounds<span class="token punctuation">.</span>Height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Start our animation</span>orbitVisual<span class="token punctuation">.</span><span class="token function">StartAnimation</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>Visual<span class="token punctuation">.</span>RotationAngleInDegrees<span class="token punctuation">)</span><span class="token punctuation">,</span> orbitAnimation<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>If you try to run the application you’ll see… absolutely no change! The sun, the planet, and its satellite are still stacked on top of each other and while they’re rotating there’s no way of telling. Let’s fix that by offsetting the planet:</p><pre class=" language-csharp"><code class="language-csharp">Visual planetVisual <span class="token operator">=</span> ElementCompositionPreview<span class="token punctuation">.</span><span class="token function">GetElementVisual</span><span class="token punctuation">(</span>Planet<span class="token punctuation">)</span><span class="token punctuation">;</span>planetVisual<span class="token punctuation">.</span>TransformMatrix <span class="token operator">=</span> Matrix4x4<span class="token punctuation">.</span><span class="token function">CreateTranslation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Now the planet correctly rotates around the sun. </p><img src="/2017/07/11/intro-to-composition-animations/composition-animation-demo-planet-only.gif" title="First Planet"><p>If you’re curious about easing functions I recommend <a href="https://greensock.com/ease-visualizer" target="_blank" rel="noopener">GSAP’s ease visualizer</a>, is a great aid to pick the function that’s right for your needs</p><h3 id="Enter-Satellite"><a href="#Enter-Satellite" class="headerlink" title="Enter Satellite"></a>Enter Satellite</h3><p>The next step is to introduce a satellite that perform 3 rotations around the planet while spinning around the sun. We could use another keyframe animation and simply change the time or the final angle. But instead we’re going to take advantage of ExpressionAnimations. We already know how to animate the angle, all we need is to use the value in an expression to determine the satellite’s rotation!</p><p>We could read the rotation angle value directly from the Orbit visual object but there’s a better way. As mentioned earlier Compositor is a factory for Composition related objects. We are going to take advantage of the nifty <a href="https://docs.microsoft.com/en-us/uwp/api/windows.ui.composition.compositionpropertyset" target="_blank" rel="noopener">CompositionPropertySet</a> to store the orbit’s angle. </p><p>The property set is a store for key-value pairs. Is very handy for values you are going to re-use in your code - an offset for example - and you can even apply animations to change the values over time, like for the rotation angle in our galaxy:</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">var</span> propertySet <span class="token operator">=</span> compositor<span class="token punctuation">.</span><span class="token function">CreatePropertySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>propertySet<span class="token punctuation">.</span><span class="token function">InsertScalar</span><span class="token punctuation">(</span><span class="token string">"angle"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> angleAnimation <span class="token operator">=</span> compositor<span class="token punctuation">.</span><span class="token function">CreateScalarKeyFrameAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>angleAnimation<span class="token punctuation">.</span>Duration <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>angleAnimation<span class="token punctuation">.</span>IterationBehavior <span class="token operator">=</span> AnimationIterationBehavior<span class="token punctuation">.</span>Forever<span class="token punctuation">;</span>angleAnimation<span class="token punctuation">.</span><span class="token function">InsertKeyFrame</span><span class="token punctuation">(</span><span class="token number">1f</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span> compositor<span class="token punctuation">.</span><span class="token function">CreateLinearEasingFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>propertySet<span class="token punctuation">.</span><span class="token function">StartAnimation</span><span class="token punctuation">(</span><span class="token string">"angle"</span><span class="token punctuation">,</span> angleAnimation<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The animation is the same we used to animate the angle of the orbit, but instead of applying to the <code>RotationAngleInDegrees</code> we are targeting the <code>angle</code> in our property set.<br>The generic angleAnimation is applied the “angle” of the property set. The angle is now animated inside the property set and ready to be used to rotate the satellite around the planet.</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">var</span> satelliteVisual <span class="token operator">=</span> ElementCompositionPreview<span class="token punctuation">.</span><span class="token function">GetElementVisual</span><span class="token punctuation">(</span>Satellite<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Offset the satellite from the planet</span>satelliteVisual<span class="token punctuation">.</span>TransformMatrix <span class="token operator">=</span> Matrix4x4<span class="token punctuation">.</span><span class="token function">CreateTranslation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Adjust the center point to be exactly in the center of the satellite</span>satelliteVisual<span class="token punctuation">.</span>CenterPoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>Satellite<span class="token punctuation">.</span>ActualWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>Satellite<span class="token punctuation">.</span>ActualHeight <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> satelliteAnimation <span class="token operator">=</span> compositor<span class="token punctuation">.</span><span class="token function">CreateExpressionAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// The expression that controls the value of the animatable object</span>satelliteAnimation<span class="token punctuation">.</span>Expression <span class="token operator">=</span> <span class="token string">"3 * propertySet.angle"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Fill in the necessary variables and parameters used in the expression</span>satelliteAnimation<span class="token punctuation">.</span><span class="token function">SetReferenceParameter</span><span class="token punctuation">(</span><span class="token string">"propertySet"</span><span class="token punctuation">,</span> propertySet<span class="token punctuation">)</span><span class="token punctuation">;</span>satelliteVisual<span class="token punctuation">.</span><span class="token function">StartAnimation</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>Visual<span class="token punctuation">.</span>RotationAngleInDegrees<span class="token punctuation">)</span><span class="token punctuation">,</span> satelliteAnimation<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Is worth noting that unlike the key frame animation where we explicitly had to declare what we were animating - in our case a scalar for the angle (<code>CreateScalarKeyFrameAnimation</code>) - expression animations don’t have this constraint. Instead you’ll have to make sure the property you’re targeting with your animation and the value returned by the expression animation match, let it be a scalar for the angle like in our case, or a Vector2 for the Scale and so on.</p><p>Also, make sure the names of the variables in your expression match those you are passing in as reference parameters.<br>Running the application now you’ll see the final result. I changed <code>App.xml</code> theme to use <code>RequestedTheme=&quot;Dark&quot;</code> for a nicer galaxy.</p><img src="/2017/07/11/intro-to-composition-animations/composition-animation-demo-planet-satellite.gif" title="Completed UWP Galaxy"><h3 id="Stars-and-Beyond"><a href="#Stars-and-Beyond" class="headerlink" title="Stars and Beyond"></a>Stars and Beyond</h3><p>You can check the completed solution on <a href="https://github.com/meanme/composition-animations-intro" target="_blank" rel="noopener">GitHub</a>. To make the universe a little more interesting and show off few more expression functions I’ve added some stars to our galaxy. The opacity will flicker from 0.3 to 1 leveraging the cosine of the angle in our property set.</p><img src="/2017/07/11/intro-to-composition-animations/composition-animation-demo-complete-60.gif" title="Completed UWP Galaxy With Stars"><p>Additionally, there’s a new event handler to center the rotation upon resizing of the window.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Hope you liked this demo and found it interesting. And let me know if you have questions.<br>In the next post I’ve used Composition Animations in a real world scenario and created a <a href="/sticky-header">sticky shrinking header</a>.</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;An-animated-galaxy&quot;&gt;&lt;a href=&quot;#An-animated-galaxy&quot; class=&quot;headerlink&quot; title=&quot;An animated galaxy&quot;&gt;&lt;/a&gt;An animated galaxy&lt;/h3&gt;&lt;p&gt;In this article we’re going to create a small galaxy using some of the available animation systems available with the Windows.UI.Composition. Here’s a quick look of what the completed project is going to look like.&lt;/p&gt;
&lt;img src=&quot;/2017/07/11/intro-to-composition-animations/composition-animation-demo-complete-60-1.gif&quot; title=&quot;Completed UWP Galaxy&quot;&gt;
&lt;p&gt;By default some UWP components have subtle animations, ListView and GridView for example will animate the entrance and removal of items.&lt;br&gt;Additionally, you can define storyboard animations directly in your XAML code and trigger them with VisualStateManager’s states.&lt;/p&gt;
&lt;p&gt;In some other cases, you might want to animate visual elements directly, accessing individual properties, or maybe orchestrating multiple animations together.&lt;br&gt;For those scenarios Composition animations come in handy as they allow for direct access to Visual Layer, granting greater flexibility.&lt;br&gt;Composition animations come in two flavors: Keyframe animations and Expression animations. For our galaxy demo we’re going to employ both. So let’s dive into the code.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
